#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <sstream>
#include <thread>
#include <list>

#include "Intcode.hpp"

int runTest(int phase, int signal)
{
  //  std::vector<int> memory {3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0 };
  //std::vector<int> memory {3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,
  //			   1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0 };

  std::vector<int> memory { 3,8,1001,8,10,8,105,1,0,0,21,38,55,64,81,106,187,268,349,430,99999,3,9,101,2,9,9,1002,9,2,9,101,5,9,9,4,9,99,3,9,102,2,9,9,101,3,9,9,1002,9,4,9,4,9,99,3,9,102,2,9,9,4,9,99,3,9,1002,9,5,9,1001,9,4,9,102,4,9,9,4,9,99,3,9,102,2,9,9,1001,9,5,9,102,3,9,9,1001,9,4,9,102,5,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,99 };


  // std::vector<int> memory { 3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,
  // 			    27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5 };

  Intcode::ThreadedBlockingQueue input ({ phase, signal });
  Intcode::ThreadedBlockingQueue output;

  Intcode::Machine machine (memory, input, output);
  machine.run();

  return output.front();
}

void part1()
{
  std::vector<int> phases { 0,1,2,3,4 };

  do
    {
      std::cout << runTest(phases[4],
  			   runTest(phases[3],
  				   runTest(phases[2],
  					   runTest(phases[1],
  						   runTest(phases[0], 0)))))
  		<< std::endl;
    }
  while(std::next_permutation(phases.begin(), phases.end()));
}

void part2Machine(Intcode::Queue& input, Intcode::Queue& output)
{
  std::vector<int> memory { 3,8,1001,8,10,8,105,1,0,0,21,38,55,64,81,106,187,268,349,430,99999,3,9,101,2,9,9,1002,9,2,9,101,5,9,9,4,9,99,3,9,102,2,9,9,101,3,9,9,1002,9,4,9,4,9,99,3,9,102,2,9,9,4,9,99,3,9,1002,9,5,9,1001,9,4,9,102,4,9,9,4,9,99,3,9,102,2,9,9,1001,9,5,9,102,3,9,9,1001,9,4,9,102,5,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,99 };

  Intcode::Machine machine (memory, input, output);
  machine.run();
}

void part2Threaded ()
{
  std::vector<int> phases { 5,6,7,8,9 };

   do
    {
      Intcode::ThreadedBlockingQueue EA ({ phases[0], 0 });
      Intcode::ThreadedBlockingQueue AB ({ phases[1] });
      Intcode::ThreadedBlockingQueue BC ({ phases[2] });
      Intcode::ThreadedBlockingQueue CD ({ phases[3] });
      Intcode::ThreadedBlockingQueue DE ({ phases[4] });

      std::thread A ([&] () { part2Machine(EA, AB); });
      std::thread B ([&] () { part2Machine(AB, BC); });
      std::thread C ([&] () { part2Machine(BC, CD); });
      std::thread D ([&] () { part2Machine(CD, DE); });
      std::thread E ([&] () { part2Machine(DE, EA); });

      A.join();
      B.join();
      C.join();
      D.join();
      E.join();

      std::cout << EA.front() << std::endl;
    }
   while(std::next_permutation(phases.begin(), phases.end()));
}

Intcode::Machine part2MakeMachine (Intcode::Queue& input, Intcode::Queue& output)
{
  std::vector<int> memory { 3,8,1001,8,10,8,105,1,0,0,21,38,55,64,81,106,187,268,349,430,99999,3,9,101,2,9,9,1002,9,2,9,101,5,9,9,4,9,99,3,9,102,2,9,9,101,3,9,9,1002,9,4,9,4,9,99,3,9,102,2,9,9,4,9,99,3,9,1002,9,5,9,1001,9,4,9,102,4,9,9,4,9,99,3,9,102,2,9,9,1001,9,5,9,102,3,9,9,1001,9,4,9,102,5,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,99 };

  Intcode::Machine machine (memory, input, output);
  return machine;
}

void part2Exceptions ()
{
  std::vector<int> phases { 5,6,7,8,9 };
  
  do
    {
      Intcode::ExceptionReentrantQueue EA ({ phases[0], 0 });
      Intcode::ExceptionReentrantQueue AB ({ phases[1] });
      Intcode::ExceptionReentrantQueue BC ({ phases[2] });
      Intcode::ExceptionReentrantQueue CD ({ phases[3] });
      Intcode::ExceptionReentrantQueue DE ({ phases[4] });


      std::vector<std::pair<Intcode::Machine, bool> > machines
	{
	 { part2MakeMachine(EA, AB), false },
	 { part2MakeMachine(AB, BC), false },
	 { part2MakeMachine(BC, CD), false },
	 { part2MakeMachine(CD, DE), false },
	 { part2MakeMachine(DE, EA), false },
	};

      auto machine_iter = machines.begin();
      while(std::any_of(machines.begin(), machines.end(), [] (auto p) { return p.second == false; }))
	{
	  try
	    {
	      machine_iter->first.run();
	      machine_iter->second = true;
	      ++machine_iter;
	      if(machine_iter == machines.end())
		{
		  machine_iter = machines.begin();
		}
	    }
	  catch (Intcode::waiting_for_input& e)
	    {
	      ++machine_iter;
	      if(machine_iter == machines.end())
		{
		  machine_iter = machines.begin();
		}
	    }
	}

      std::cout << EA.front() << std::endl;
    }
   while(std::next_permutation(phases.begin(), phases.end()));

}

int main()
{
  part2Exceptions();
  //part2Threaded();
  return 0;
}
