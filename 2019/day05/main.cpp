#include <iostream>
#include <vector>
#include <array>

#include "Intcode.hpp"

#if 0
std::ostream& operator<<(std::ostream& out, const opcode& op)
{
  out << op[3] << op[2] << op[1] << op[0];
  return out;
}

struct Instruction
{
  Instruction(std::vector<int>& memory, int ip)
    : instruction_ptr(ip), op(separate(memory.at(ip))), memory(memory)
  {}

  int code() const { return op[0]; }
  int ip() const { return instruction_ptr; }
  
  template<int Index>
  int& param()
  {
    return op[Index] != 0 ? memory.at(instruction_ptr + Index) : memory.at(memory.at(instruction_ptr + Index));    
  }
    
  int instruction_ptr;
  opcode op;
  std::vector<int>& memory;
};

int execute(Instruction i)
{
  switch(i.code())
    {
    case 1:
      {
	i.param<3>() = i.param<1>() + i.param<2>();
	return i.ip() + 4;
      }
      break;
    case 2:
      {
	i.param<3>() = i.param<1>() * i.param<2>();
	return i.ip() + 4;
      }
      break;
    case 3:
      {
	std::cout << "Enter Value:";
	std::cin >> i.param<1>();
	return i.ip() + 2;
      }
      break;
    case 4:
      {
	std::cout << i.param<1>() << std::endl;
	return i.ip() + 2;
      }
      break;

    case 5:
      {
	if (i.param<1>() != 0)
	  {
	    return i.param<2>();
	  }
	else
	  {
	    return i.ip() + 3;
	  }
      }
      break;
    case 6:
      {
	if (i.param<1>() == 0)
	  {
	    return i.param<2>();;
	  }
	else
	  {
	    return i.ip() + 3;
	  }
      }
      break;
    case 7:
      {
	i.param<3>() = i.param<1>() < i.param<2>() ? 1 : 0;
	return i.ip() + 4;
      }
      break;
    case 8:
      {
	i.param<3>() = i.param<1>() == i.param<2>() ? 1 : 0;
	return i.ip() + 4;
      }
      break;
    default:
      throw std::runtime_error("unknown opcode");
    }
}

void run (std::vector<int> buffer)
{
  int index = 0;
  while (buffer.at(index) != 99)
    {
      index = execute(Instruction {buffer, index});
    }
}

#endif
int main()
{
  std::vector<int> program { 3,225,1,225,6,6,1100,1,238,225,104,0,101,14,135,224,101,-69,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,102,90,169,224,1001,224,-4590,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1102,90,45,224,1001,224,-4050,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,1001,144,32,224,101,-72,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,36,93,225,1101,88,52,225,1002,102,38,224,101,-3534,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1102,15,57,225,1102,55,49,225,1102,11,33,225,1101,56,40,225,1,131,105,224,101,-103,224,224,4,224,102,8,223,223,1001,224,2,224,1,224,223,223,1102,51,39,225,1101,45,90,225,2,173,139,224,101,-495,224,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,1101,68,86,224,1001,224,-154,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,344,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,359,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,374,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,389,101,1,223,223,108,677,677,224,102,2,223,223,1006,224,404,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,419,101,1,223,223,1007,677,226,224,1002,223,2,223,1006,224,434,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,8,677,226,224,102,2,223,223,1006,224,464,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,479,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,524,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,539,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,554,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,584,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,1008,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,644,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,659,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226 };


  Intcode::Machine machine(program);
  machine.run();

  // IntcodeMachine machine(program);
  // machine.run();

   // run({ 3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9 });
  //  run ({3,3,1105,-1,9,1101,0,0,12,4,12,99,1});

  
  // - Using position mode, consider whether the input is equal to 8; output 1 (if it is) or 0 (if it is not).
  // run({  3,9,8,9,10,9,4,9,99,-1,8});

  
  // // - Using position mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
  // run({  3,9,7,9,10,9,4,9,99,-1,8 });
  
  // // - Using immediate mode, consider whether the input is equal to 8; output 1 (if it is) or 0 (if it is not).
  // run({3,3,1108,-1,8,3,4,3,99});

  // //- Using immediate mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
  // run({    3,3,1107,-1,8,3,4,3,99});



  return 0;
}
